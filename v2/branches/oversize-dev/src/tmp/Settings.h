#ifndef SETTINGS_H#define SETTINGS_H#include <string>#include <vector>/**  * class Settings  * This class herits from QSettings and contains the application settings  */class Settings{public:	// Constructors/Destructors	//  	/**	 * Empty Constructor	 */	Settings ( );	/**	 * Empty Destructor	 */	virtual ~Settings ( );	/**	 * @return int	 */	int maxRecentFiles ( ) const;	/**	 * @param  i	 */	void setMaxRecentFiles (int i );	/**	 * @return int	 */	int maxRecentProjects ( ) const;	/**	 * @param  i	 */	void setMaxRecentProjects (int i );	/**	 */	void languages ( );	/**	 * @return Settings*	 */	static Settings* current ( );protected:private:	// Static Private attributes	//  	static Settings* m_mSelf;	// Private attributes	//  	int m_mMaxRecentFiles;	int m_mMaxRecentProjects;	// Private attribute accessor methods	//  	/**	 * Get the value of m_mSelf	 * @return the value of m_mSelf	 */	Settings* getMSelf ( );	// Private attribute accessor methods	//  	/**	 * Set the value of m_mMaxRecentFiles	 * @param new_var the new value of m_mMaxRecentFiles	 */	void setMMaxRecentFiles ( int new_var );	/**	 * Get the value of m_mMaxRecentFiles	 * @return the value of m_mMaxRecentFiles	 */	int getMMaxRecentFiles ( );	/**	 * Set the value of m_mMaxRecentProjects	 * @param new_var the new value of m_mMaxRecentProjects	 */	void setMMaxRecentProjects ( int new_var );	/**	 * Get the value of m_mMaxRecentProjects	 * @return the value of m_mMaxRecentProjects	 */	int getMMaxRecentProjects ( );	void initAttributes ( ) ;};#endif // SETTINGS_H